{"version":3,"sources":["Actions/Logs/getLogsAction.js","Actions/Logs/refreshLogsAction.js","Actions/Logs/setAutoRefreshAction.js","Actions/Logs/setLogsAction.js","Actions/Logs/setQueryAction.js","Actions/Logs/setSearchPeriodAction.js","Actions/Profile/availableAppsLoadedAction.js","Actions/Profile/clearDataAction.js","Actions/Profile/loadProfileAction.js","Actions/Profile/profileLoadedAction.js","Actions/Profile/setCredentialsAction.js","Actions/Profile/tryFindCredentialsAction.js","Reducers/initialState.js","Actions/errorAction.js","Reducers/combineActiveReducers.js","Reducers/index.js","Reducers/Profile/clearDataReducer.js","Reducers/Profile/profileLoadedReducer.js","Reducers/Profile/availableAppsReducer.js","Reducers/Profile/setCredentialsReducer.js","Reducers/Logs/setAutoRefreshReducer.js","Reducers/Logs/setQueryReducer.js","Reducers/Logs/setSearchPeriodReducer.js","Reducers/Logs/setLogsReducer.js","Reducers/Logs/getLogsReducer.js","Reducers/errorReducer.js","Epics/Logs/utils.js","Epics/Logs/autoRefreshEpic.js","Epics/Profile/clearDataEpic.js","Epics/index.js","Epics/Logs/getLogsEpic.js","Actions/emptyAction.js","Epics/Profile/setCredentialsEpic.js","Epics/Profile/findCredentialsCandidateEpic.js","Epics/Profile/setQueryEpic.js","Epics/Profile/loadProfileEpic.js","Utils/QueryStringUtils.js","Services/StorageRepository.js","Services/ProfileRepository.js","Services/Mock/HttpMock.js","Services/HttpClient.js","Services/ApplicationInsightsClient.js","Services/httpClientFactory.js","Utils/DomUtils.js","Utils/ConsoleDoc.js","Store/index.js","Components/Header.js","Utils/DateUtils.js","Models/SeverityLevel.js","Components/LogLine.js","Components/Log.js","Components/Credentials.js","Components/QueryBox.js","Components/StatusBar.js","App.js","registerServiceWorker.js","index.js"],"names":["GET_LOGS","USER_SEARCH_GET_LOGS_SOURCE","AUTOREFRESH_GET_LOGS_SOURCE","SET_AUTOREFRESH","SET_LOGS","SET_QUERY","SET_SEARCH_PERIOD","AVAILABLE_APPS_LOADED","CLEAR_DATA","LOAD_PROFILE","PROFILE_LOADED","SET_CREDENTIALS","setCredentialsAction","credentials","type","payload","TRY_FIND_CREDENTIALS","initialState","logs","appId","apiKey","query","searchPeriod","autoRefresh","refreshInterval","appName","fetchTime","loading","error","availableApps","ERROR","rootReducer","reducers","state","arguments","length","undefined","action","currentState","forEach","reducer","newState","combineActiveReducers","Object","objectSpread","loadedProps","enabled","skipLoading","source","anyCredentials","isAutoRefreshEnabled","$state","value","profileLoaded","rootEpic","combineEpics","action$","state$","_ref","applicationInsightsClient","DomUtils","pipe","ofType","filter","switchMap","forceScrollEnd","isScrollEnd","hasToScroll","getLogs","mergeMap","of","setLogsAction","catchError","err","reason","message","errorAction","tap","scrollBottom","q","timer","map","t","store","profileRepository","storeCredentials","getStoredAppNamesCredentials","availableAppsLoadedAction","findCredentialsCanditate","storeQuery","clearData","ConsoleDoc","printHelpOnConsole","getCredentials","getQuery","profileLoadedAction","Utils_QueryStringUtils","window","location","search","test","slice","split","reduce","params","param","_param$split","_param$split2","slicedToArray","key","decodeURIComponent","replace","history","url","href","pushState","StorageRepository","classCallCheck","this","localStorage","sessionStorage","parseObject","content","getItem","JSON","parse","e","serializeObject","setItem","stringify","clear","ProfileRepository","storageRepository","queryParams","QueryStringUtils","getParams","removeParams","storedCredentials","getSessionData","getLocalData","saveSessionData","saveLocalData","storeAppCredentials","credentialsByApp","getAllCredentials","keys","clearSessionData","clearLocalData","HttpMock","BasicTraceMockQuery","concat","response","mock","status","SampleQuery","sampleMock","HttpClient","uri","headers","request","body","method","requestHeaders","Accept","Content-Type","queryString","name","encodeURIComponent","join","buildQuery","ajax","responseType","ApplicationInsightsClient","httpClient","timespan","_this","push","get","buildAppUri","buildHeaders","httpResponse","mapQueryResponse","console","mapError","throwError","innererror","x-api-key","_this2","tables","Error","colIndexPropertyMap","buildColumnIndexPropertyMap","rows","row","itemType","reponseMapper","getResponseMapper","model","propertyMapper","r","sort","a","b","timestamp","getAppName","Date","responseMapper","columnsIndexMap","columns","c","i","columnsIndexPropertyMap","appNameIndex","trace","severityLevel","exception","Utils_DomUtils","selector","document","querySelector","scrollTo","scrollHeight","scrollTop","offsetHeight","Utils_ConsoleDoc","log","epicMiddleware","createEpicMiddleware","dependencies","createStore","applyMiddleware","run","Header","props","sidebar","toggleSidebar","titleIconClass","react_default","createElement","className","hidden","role","aria-labelledby","id","onClick","Utils_DateUtils","date","formatTwoDigit","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","formatDate","formatTime","number","SeverityLevel","0","1","2","3","4","LogLine","DateUtils","formatDateTime","Log","react","item","src_Components_LogLine","connect","Credentials","possibleConstructorReturn","getPrototypeOf","call","validCredentials","selectedStoredCredential","editing","handleChange","bind","assertThisInitialized","handleSubmit","nextProps","credentialsChanged","setState","event","defineProperty","target","setSearchPeriod","preventDefault","setCredentials","tryFindCredentials","confirm","setAutoRefresh","credentials1","credentials2","onSubmit","placeholder","disabled","onChange","renderAppsDropDown","_this3","checkStoredAppCredentials","_this4","checked","toggleAutoRefresh","htmlFor","_this5","handlePeriodChange","renderCredentialsForm","renderGlobalOptions","renderPeriod","Component","toConsumableArray","dispatch","tryFindCredentialsAction","setAutoRefreshAction","setSearchPeriodAction","QueryBox","setQuery","onEnterPress","keyCode","ctrlKey","onKeyDown","setQueryAction","StatusBar","App","loadProfile","src_Components_Header","hasCredentials","Components_Log","src_Components_StatusBar","src_Components_QueryBox","src_Components_Credentials","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","render","es","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bfe5b5fd.chunk.js","sourcesContent":["export const GET_LOGS = 'GET_LOGS';\r\nexport const USER_SEARCH_GET_LOGS_SOURCE = 'USER_SEARCH';\r\n\r\nexport function getLogsAction() {\r\n  return { type: GET_LOGS, payload: { source: USER_SEARCH_GET_LOGS_SOURCE } };\r\n}","import { GET_LOGS } from './getLogsAction';\r\nexport const AUTOREFRESH_GET_LOGS_SOURCE = 'AUTOREFRESH';\r\n\r\nexport function refreshLogsAction() {\r\n  return { type: GET_LOGS, payload: { source: AUTOREFRESH_GET_LOGS_SOURCE } };\r\n}","export const SET_AUTOREFRESH = 'SET_AUTOREFRESH';\r\nexport function setAutoRefreshAction(enabled) {\r\n  return { type: SET_AUTOREFRESH, payload: { enabled } };\r\n}","export const SET_LOGS = 'SET_LOGS';\r\nexport function setLogsAction(logs) {\r\n  return { type: SET_LOGS, payload: logs };\r\n}\r\n","export const SET_QUERY = 'SET_QUERY';\r\nexport function setQueryAction(query) {\r\n  return { type: SET_QUERY, payload: { query } };\r\n}","export const SET_SEARCH_PERIOD = 'SET_SEARCH_PERIOD';\r\nexport function setSearchPeriodAction(searchPeriod) {\r\n  return { type: SET_SEARCH_PERIOD, payload: { searchPeriod } };\r\n}","export const AVAILABLE_APPS_LOADED = 'AVAILABLE_APPS_LOADED';\r\nexport function availableAppsLoadedAction(availableApps) {\r\n  return {\r\n    type: AVAILABLE_APPS_LOADED,\r\n    payload: {\r\n      availableApps\r\n    }\r\n  };\r\n}","export const CLEAR_DATA = 'CLEAR_DATA';\r\nexport function clearDataAction() {\r\n  return { type: CLEAR_DATA, payload: null };\r\n}","export const LOAD_PROFILE = 'LOAD_PROFILE';\r\nexport function loadProfileAction() {\r\n  return { type: LOAD_PROFILE };\r\n}","export const PROFILE_LOADED = 'PROFILE_LOADED';\r\nexport function profileLoadedAction(credentials, query, availableApps) {\r\n  return {\r\n    type: PROFILE_LOADED,\r\n    payload: {\r\n      credentials,\r\n      query,\r\n      availableApps\r\n    }\r\n  };\r\n}","export const SET_CREDENTIALS = 'SET_CREDENTIALS';\r\nexport function setCredentialsAction(credentials) {\r\n  return { type: SET_CREDENTIALS, payload: { credentials } };\r\n}","export const TRY_FIND_CREDENTIALS = 'TRY_FIND_CREDENTIALS';\r\nexport function tryFindCredentialsAction(appName) {\r\n  return { type: TRY_FIND_CREDENTIALS, payload: { appName } };\r\n}","export const initialState = () => {\r\n  return {\r\n    logs: [],\r\n    credentials: {\r\n      appId: '',\r\n      apiKey: ''\r\n    },\r\n    query: 'traces | sort by timestamp desc | limit 50',\r\n    searchPeriod: '',\r\n    autoRefresh: true,\r\n    refreshInterval: null,\r\n    appName: null,\r\n    fetchTime: null,\r\n    loading: false,\r\n    error: null,\r\n    availableApps: []\r\n  }\r\n};","export const ERROR = 'ERROR';\r\nexport function errorAction(reason) {\r\n  return { type: ERROR, payload: reason };\r\n}","export const combineActiveReducers = (reducers, initialState) => {\r\n  return (state = initialState, action) => {\r\n    let currentState = state;\r\n    reducers.forEach(reducer => {\r\n      const newState = reducer(currentState, action);\r\n      if (newState) {\r\n        currentState = newState;\r\n      }\r\n    });\r\n    return currentState;\r\n  };\r\n};","import {\r\n  getLogsReducer,\r\n  setAutoRefreshReducer,\r\n  setLogsReducer,\r\n  setQueryReducer,\r\n  setSearchPeriodReducer\r\n} from './Logs';\r\nimport {\r\n  clearDataReducer,\r\n  profileLoadedReducer,\r\n  setCredentialsReducer,\r\n  availableAppsReducer\r\n} from './Profile';\r\nimport { initialState } from './initialState';\r\nimport { errorReducer } from './errorReducer';\r\nimport { combineActiveReducers } from './combineActiveReducers';\r\n\r\nexport const rootReducer = combineActiveReducers([\r\n  clearDataReducer,\r\n  profileLoadedReducer,\r\n  availableAppsReducer,\r\n  setCredentialsReducer,\r\n  setAutoRefreshReducer,\r\n  setQueryReducer,\r\n  setSearchPeriodReducer,\r\n  setLogsReducer,\r\n  getLogsReducer,\r\n  errorReducer\r\n], initialState());","import { initialState } from '../initialState';\r\nimport { CLEAR_DATA } from '../../Actions/Profile';\r\n\r\nexport function clearDataReducer(state, action) {\r\n  if (action.type !== CLEAR_DATA) return;\r\n  return { ...initialState() };\r\n}\r\n","import { PROFILE_LOADED } from '../../Actions/Profile';\r\n\r\nexport function profileLoadedReducer(state, action) {\r\n  if (action.type !== PROFILE_LOADED) return;\r\n  const loadedProps = {};\r\n  if (action.payload.credentials) {\r\n    loadedProps.credentials = action.payload.credentials;\r\n  }\r\n  if (action.payload.query) {\r\n    loadedProps.query = action.payload.query;\r\n  }\r\n  return { ...state, ...loadedProps };\r\n}","import { PROFILE_LOADED, AVAILABLE_APPS_LOADED } from '../../Actions/Profile';\r\n\r\nexport function availableAppsReducer(state, action) {\r\n  if (action.type !== PROFILE_LOADED && action.type !== AVAILABLE_APPS_LOADED) return;\r\n  const loadedProps = {};\r\n  if (action.payload.availableApps) {\r\n    loadedProps.availableApps = action.payload.availableApps;\r\n  }\r\n  return { ...state, ...loadedProps };\r\n}","import { SET_CREDENTIALS } from '../../Actions/Profile';\r\n\r\nexport function setCredentialsReducer(state, action) {\r\n  if (action.type !== SET_CREDENTIALS) return;\r\n  return { ...state, credentials: action.payload.credentials };\r\n}","import { SET_AUTOREFRESH } from '../../Actions/Logs';\r\n\r\nexport function setAutoRefreshReducer(state, action) {\r\n  if (action.type !== SET_AUTOREFRESH) return;\r\n  return { ...state, autoRefresh: action.payload.enabled };\r\n}","import { SET_QUERY } from '../../Actions/Logs';\r\n\r\nexport function setQueryReducer(state, action) {\r\n  if (action.type !== SET_QUERY) return;\r\n  return { ...state, query: action.payload.query };\r\n}\r\n","import { SET_SEARCH_PERIOD } from '../../Actions/Logs';\r\n\r\nexport function setSearchPeriodReducer(state, action) {\r\n  if (action.type !== SET_SEARCH_PERIOD) return;\r\n  return { ...state, searchPeriod: action.payload.searchPeriod };\r\n}\r\n","import { SET_LOGS } from '../../Actions/Logs';\r\n\r\nexport function setLogsReducer(state, action) {\r\n  if (action.type !== SET_LOGS) return;\r\n  return {\r\n    ...state,\r\n    logs: action.payload.logs,\r\n    appName: action.payload.appName,\r\n    fetchTime: action.payload.fetchTime,\r\n    loading: false,\r\n    error: null\r\n  };\r\n}","import { GET_LOGS, AUTOREFRESH_GET_LOGS_SOURCE } from '../../Actions/Logs';\r\n\r\nexport function getLogsReducer(state, action) {\r\n  if (action.type !== GET_LOGS) return;\r\n  const skipLoading = action.payload.source === AUTOREFRESH_GET_LOGS_SOURCE && state.error;\r\n  return { ...state, loading: skipLoading ? false : true };\r\n}\r\n","import { ERROR } from '../Actions';\r\n\r\nexport function errorReducer(state, action) {\r\n  if (action.type !== ERROR) return;\r\n  return { ...state, error: action.payload, loading: false };\r\n}","export function anyCredentials(credentials) {\r\n  return credentials && credentials.appId && credentials.apiKey;\r\n}","import { timer } from 'rxjs';\r\nimport { filter, switchMap, map } from 'rxjs/operators';\r\nimport { anyCredentials } from './utils';\r\nimport { refreshLogsAction, SET_AUTOREFRESH, SET_LOGS } from '../../Actions/Logs';\r\nimport { emptyAction } from '../../Actions';\r\nimport { PROFILE_LOADED } from '../../Actions/Profile';\r\nconst refreshTimeThreshold = 30000;\r\n\r\nexport const autoRefreshEpic = (action$, $state) =>\r\n  action$\r\n    .pipe(\r\n      filter(q =>\r\n        (q.type === SET_AUTOREFRESH && q.payload.enabled) ||\r\n        // set auto refresh on startup and after setting logs, queue next refresh\r\n        (isAutoRefreshEnabled($state) && ((q.type === SET_LOGS) || profileLoaded(q)))\r\n      ),\r\n      switchMap(q => {\r\n        return timer(refreshTimeThreshold)\r\n          .pipe(\r\n            map(t => isAutoRefreshEnabled($state) ? refreshLogsAction() : emptyAction())\r\n          );\r\n      })\r\n    );\r\n\r\nconst isAutoRefreshEnabled = ($state) => $state.value.autoRefresh;\r\nconst profileLoaded = (action) => action.type === PROFILE_LOADED && anyCredentials(action.payload.credentials);","import { of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ofType } from 'redux-observable';\r\nimport { CLEAR_DATA } from '../../Actions/Profile';\r\nimport { emptyAction } from '../../Actions';\r\n\r\nexport const clearDataEpic = (action$, store, { profileRepository }) =>\r\n  action$\r\n    .pipe(\r\n      ofType(CLEAR_DATA),\r\n      switchMap(q => {\r\n        profileRepository.clearData();\r\n        return of(emptyAction());\r\n      })\r\n    );\r\n","import { combineEpics } from 'redux-observable';\r\nimport { \r\n    getLogsEpic, \r\n    autoRefreshEpic \r\n} from './Logs';\r\n\r\nimport {\r\n    setCredentialsEpic,\r\n    findCredentialsCandidateEpic,\r\n    setQueryEpic,\r\n    clearDataEpic,\r\n    loadProfileEpic\r\n} from './Profile';\r\n\r\nexport const rootEpic = combineEpics(\r\n    getLogsEpic,\r\n    autoRefreshEpic,\r\n    setCredentialsEpic,\r\n    findCredentialsCandidateEpic,\r\n    setQueryEpic,\r\n    clearDataEpic,\r\n    loadProfileEpic\r\n);","import { of } from 'rxjs';\r\nimport { filter, switchMap, mergeMap, catchError, tap } from 'rxjs/operators';\r\nimport { ofType } from 'redux-observable';\r\nimport { anyCredentials } from './utils';\r\nimport { errorAction } from '../../Actions';\r\nimport {\r\n  setCredentialsAction,\r\n  PROFILE_LOADED\r\n} from '../../Actions/Profile';\r\nimport {\r\n  setLogsAction,\r\n  GET_LOGS,\r\n  AUTOREFRESH_GET_LOGS_SOURCE\r\n} from '../../Actions/Logs';\r\n\r\nexport const getLogsEpic = (action$, state$, { applicationInsightsClient, DomUtils }) =>\r\n  action$\r\n    .pipe(\r\n      ofType(GET_LOGS, PROFILE_LOADED),\r\n      filter(action => {\r\n        const state = state$.value;\r\n        return anyCredentials(state.credentials) &&\r\n          !(action.payload.source === AUTOREFRESH_GET_LOGS_SOURCE && state.error);\r\n      }),\r\n      switchMap(action => {\r\n        // force scroll search is done by user or it is already at the end of scroll\r\n        const forceScrollEnd = hasToScroll(action, DomUtils);\r\n\r\n        const state = state$.value;\r\n        return applicationInsightsClient.getLogs(state.credentials, state.query, state.searchPeriod)\r\n          .pipe(\r\n            mergeMap(logs => of(\r\n              setLogsAction(logs),\r\n              setCredentialsAction({ ...state$.value.credentials, appName: logs.appName }))\r\n            ),\r\n            catchError(err => {\r\n              let reason = typeof (err) === 'string' ? err : err.message\r\n              return of(errorAction(reason || 'Error when getting logs'));\r\n            }),\r\n            tap(() => {\r\n              if (forceScrollEnd) {\r\n                DomUtils.scrollBottom('.ail-body');\r\n              }\r\n            })\r\n          );\r\n      })\r\n    )\r\n  ;\r\n\r\nfunction hasToScroll(action, DomUtils) {\r\n  return action.payload.source !== AUTOREFRESH_GET_LOGS_SOURCE ||\r\n    DomUtils.isScrollEnd('.ail-body');\r\n}\r\n","export function emptyAction() {\r\n  return { type: 'never' };\r\n}","import { of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ofType } from 'redux-observable';\r\nimport { SET_CREDENTIALS, availableAppsLoadedAction } from '../../Actions/Profile';\r\n\r\nexport const setCredentialsEpic = (action$, store, { profileRepository }) =>\r\n  action$\r\n    .pipe(\r\n      ofType(SET_CREDENTIALS),\r\n      switchMap(q => {\r\n        profileRepository.storeCredentials(q.payload.credentials);\r\n        const availableApps = profileRepository.getStoredAppNamesCredentials();\r\n        return of(availableAppsLoadedAction(availableApps));\r\n      })\r\n    );\r\n","import { of } from 'rxjs';\r\nimport { switchMap, filter, map } from 'rxjs/operators';\r\nimport { ofType } from 'redux-observable';\r\nimport { emptyAction } from '../../Actions';\r\nimport { TRY_FIND_CREDENTIALS, setCredentialsAction } from '../../Actions/Profile';\r\n\r\nexport const findCredentialsCandidateEpic = (action$, store, { profileRepository }) =>\r\n  action$\r\n    .pipe(\r\n      ofType(TRY_FIND_CREDENTIALS),\r\n      switchMap(q => {\r\n        return of(profileRepository.findCredentialsCanditate(q.payload.appName))\r\n          .pipe(\r\n            filter(credentials => credentials !== null),\r\n            map(credentials => {\r\n              return credentials ? setCredentialsAction(credentials) : emptyAction();\r\n            })\r\n          )\r\n      })\r\n    );\r\n\r\n","import { of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ofType } from 'redux-observable';\r\nimport { SET_QUERY } from '../../Actions/Logs';\r\nimport { emptyAction } from '../../Actions';\r\n\r\nexport const setQueryEpic = (action$, store, { profileRepository }) =>\r\n  action$\r\n    .pipe(\r\n      ofType(SET_QUERY),\r\n      switchMap(q => {\r\n        profileRepository.storeQuery(q.payload.query);\r\n        return of(emptyAction());\r\n      })\r\n    );","import { of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ofType } from 'redux-observable';\r\nimport { profileLoadedAction, LOAD_PROFILE } from '../../Actions/Profile';\r\n\r\nexport const loadProfileEpic = (action$, store, { profileRepository, ConsoleDoc }) =>\r\n  action$.pipe(\r\n    ofType(LOAD_PROFILE),\r\n    switchMap(q => {\r\n      ConsoleDoc.printHelpOnConsole();\r\n      const credentials = profileRepository.getCredentials();\r\n      const availableApps = profileRepository.getStoredAppNamesCredentials();\r\n      const query = profileRepository.getQuery();\r\n      return of(profileLoadedAction(credentials, query, availableApps));\r\n    })\r\n  );","class QueryStringUtils {\r\n  getParams() {\r\n    if (!window.location) {\r\n      return {};\r\n    }\r\n\r\n    const query = window.location.search;\r\n    if (!query) {\r\n      return {};\r\n    }\r\n\r\n    return (/^[?#]/.test(query) ? query.slice(1) : query)\r\n      .split('&')\r\n      .reduce((params, param) => {\r\n        let [key, value] = param.split('=');\r\n        params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\r\n        return params;\r\n      }, {});\r\n  }\r\n\r\n  removeParams() {\r\n    if (!window.history) {\r\n      return;\r\n    }\r\n    const url = window.location.href.split('?');\r\n    window.history.pushState({}, '', url[0]);\r\n  }\r\n}\r\n\r\nexport default new QueryStringUtils();","export default class StorageRepository {\r\n  constructor() {\r\n    const isTest = process.env.NODE_ENV === 'test';\r\n\r\n    this.localStorage = isTest ?\r\n      new MockStorage(mockLocalStorage) :\r\n      window.localStorage;\r\n\r\n    this.sessionStorage = isTest ?\r\n      new MockStorage(mockSessionStorage) :\r\n      window.sessionStorage;\r\n  }\r\n\r\n  getSessionData(key, parseObject) {\r\n    if (parseObject) {\r\n      const content = this.sessionStorage.getItem(key);\r\n      try {\r\n        return content ? JSON.parse(content) : null;\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    }\r\n    return this.sessionStorage.getItem(key);\r\n  }\r\n\r\n  saveSessionData(key, value, serializeObject) {\r\n    this.sessionStorage.setItem(key, serializeObject ? JSON.stringify(value) : value);\r\n  }\r\n\r\n  clearSessionData() {\r\n    this.sessionStorage.clear();\r\n  }\r\n\r\n  getLocalData(key, parseObject) {\r\n    if (parseObject) {\r\n      const content = this.localStorage.getItem(key);\r\n      try {\r\n        return content ? JSON.parse(content) : null;\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    }\r\n    return this.localStorage.getItem(key);\r\n  }\r\n\r\n  saveLocalData(key, value, serializeObject) {\r\n    this.localStorage.setItem(key, serializeObject ? JSON.stringify(value) : value);\r\n  }\r\n\r\n  clearLocalData() {\r\n    this.localStorage.clear();\r\n  }\r\n}\r\n\r\nconst mockLocalStorage = {};\r\nconst mockSessionStorage = {};\r\n\r\nclass MockStorage {\r\n  constructor(data) {\r\n    this.data = data;\r\n  }\r\n\r\n  getItem(key) {\r\n    return this.data[key];\r\n  }\r\n\r\n  setItem(key, value) {\r\n    this.data[key] = value;\r\n  }\r\n\r\n  removeItem(key) {\r\n    delete this.data[key];\r\n  }\r\n\r\n  clear() {\r\n    Object.keys(this.data).forEach(key => {\r\n      this.removeItem(key);\r\n    });\r\n  }\r\n}","import QueryStringUtils from '../Utils/QueryStringUtils';\r\nimport StorageRepository from './StorageRepository';\r\n\r\nexport default class ProfileRepository {\r\n  constructor() {\r\n    this.storageRepository = new StorageRepository();\r\n  }\r\n\r\n  getCredentials() {\r\n    const queryParams = QueryStringUtils.getParams();\r\n    if (queryParams['app_id'] && queryParams['api_key']) {\r\n      QueryStringUtils.removeParams();\r\n      return {\r\n        appId: queryParams['app_id'],\r\n        apiKey: queryParams['api_key'],\r\n      };\r\n    }\r\n\r\n    const storedCredentials = this.storageRepository.getSessionData('credentials', true);\r\n    if (storedCredentials) {\r\n      return storedCredentials;\r\n    } else {\r\n      const lastUsedCredentials = this.storageRepository.getLocalData('lruCredentials', true);\r\n      return lastUsedCredentials;\r\n    }\r\n  }\r\n\r\n  storeCredentials(credentials) {\r\n    this.storageRepository.saveSessionData('credentials', credentials, true);\r\n    this.storageRepository.saveLocalData('lruCredentials', credentials, true);\r\n    if (credentials.appName) {\r\n      this.storeAppCredentials(credentials, credentials.appName);\r\n    }\r\n  }\r\n\r\n  getQuery() {\r\n    return this.storageRepository.getSessionData('query');\r\n  }\r\n\r\n  storeQuery(query) {\r\n    this.storageRepository.saveSessionData('query', query);\r\n  }\r\n\r\n  storeAppCredentials(credentials, appName) {\r\n    if (!appName || !credentials.appId || !credentials.apiKey ||\r\n      credentials.appId === appName) {\r\n      return;\r\n    }\r\n\r\n    const credentialsByApp = this.getAllCredentials() || {};\r\n    credentialsByApp[appName] = credentials;\r\n    this.storageRepository.saveLocalData('credentialsByApp', credentialsByApp, true);\r\n  }\r\n\r\n  getAllCredentials() {\r\n    return this.storageRepository.getLocalData('credentialsByApp', true);\r\n  }\r\n\r\n  getStoredAppNamesCredentials() {\r\n    const credentialsByApp = this.getAllCredentials();\r\n    if (!credentialsByApp) {\r\n      return [];\r\n    }\r\n    const apps = Object.keys(credentialsByApp);\r\n    return apps;\r\n  }\r\n\r\n  findCredentialsCanditate(appName) {\r\n    const credentialsByApp = this.getAllCredentials();\r\n    if (!credentialsByApp) {\r\n      return null;\r\n    }\r\n    return credentialsByApp[appName];\r\n  }\r\n\r\n  clearData() {\r\n    this.storageRepository.clearSessionData();\r\n    this.storageRepository.clearLocalData();\r\n  }\r\n}","import mock from './BasicTraceMock.json';\r\nimport sampleMock from './SampleMock.json';\r\n\r\nconst HttpMock = { };\r\n\r\nconst BasicTraceMockQuery = 'https://api.applicationinsights.io/v1/apps/BasicTraceMock/query?query=';\r\nHttpMock[`${BasicTraceMockQuery}traces%20%7C%20sort%20by%20timestamp%20desc%20%7C%20limit%2050`] = {\r\n  response: mock,\r\n  status: 200\r\n};\r\n\r\nHttpMock[`${BasicTraceMockQuery}traces`] = {\r\n  response: mock,\r\n  status: 200\r\n};\r\n\r\nconst SampleQuery = 'https://api.applicationinsights.io/v1/apps/Sample/query?query=';\r\nHttpMock[`${SampleQuery}traces%20%7C%20sort%20by%20timestamp%20desc%20%7C%20limit%2050`] = {\r\n  response: sampleMock,\r\n  status: 200\r\n};\r\n\r\nHttpMock[`${SampleQuery}traces`] = {\r\n  response: sampleMock,\r\n    status: 200\r\n};\r\n\r\n\r\nexport default HttpMock;","import { ajax } from 'rxjs/ajax';\r\n\r\nexport default class HttpClient {\r\n  get(uri, headers, query) {\r\n    return this.request('GET', uri, headers, query);\r\n  }\r\n\r\n  post(uri, body, headers, query) {\r\n    return this.request('POST', uri, headers, query, body);\r\n  }\r\n\r\n  put(uri, body, headers, query) {\r\n    return this.request('PUT', uri, headers, query, body);\r\n  }\r\n\r\n  delete(uri, headers, query) {\r\n    return this.request('DELETE', uri, headers, query);\r\n  }\r\n\r\n  request(method, uri, headers, query, body) {\r\n    let requestHeaders = {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    if (headers) {\r\n      requestHeaders = { ...requestHeaders, ...headers };\r\n    }\r\n\r\n    const queryString = buildQuery(query);\r\n    return ajax({\r\n      url: queryString ? `${uri}?${queryString}` : uri,\r\n      method: method,\r\n      headers: requestHeaders,\r\n      responseType: 'json',\r\n      body: body\r\n    });\r\n  }\r\n}\r\n\r\nfunction buildQuery(query) {\r\n  if (!query || !query.length) return null;\r\n\r\n  return query.map(q => `${q.name}=${encodeURIComponent(q.value)}`).join('&');\r\n}","import httpClientFactory from './httpClientFactory';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nexport default class ApplicationInsightsClient {\r\n  constructor() {\r\n    this.httpClient = httpClientFactory();\r\n  }\r\n\r\n  getLogs(credentials, query, timespan) {\r\n    const queryParams = [{ name: 'query', value: query }];\r\n    if (timespan) {\r\n      queryParams.push({ name: 'timespan', value: timespan });\r\n    }\r\n\r\n    return this.httpClient.get(\r\n        `${this.buildAppUri(credentials)}/query`,\r\n        this.buildHeaders(credentials),\r\n        queryParams\r\n      )\r\n      .pipe(\r\n        map(httpResponse => this.mapQueryResponse(httpResponse.response)),\r\n        catchError(error => {\r\n          console.error(error.response);\r\n          if (error.response.error) {\r\n            const reason = this.mapError('', error.response.error);\r\n            return throwError(reason);\r\n          } else if (typeof (error.response) === 'string') {\r\n            return throwError(`${error.status}: ${error.response}`);\r\n          }\r\n          return throwError(error);\r\n        })\r\n      );\r\n  }\r\n\r\n  mapError(message, error) {\r\n    if (!error || !error.message) {\r\n      return `${message}`;\r\n    }\r\n    return this.mapError(`${message}${error.message}. `, error.innererror);\r\n  }\r\n\r\n  buildAppUri(credentials) {\r\n    return `https://api.applicationinsights.io/v1/apps/${credentials.appId}`;\r\n  }\r\n\r\n  buildHeaders(credentials) {\r\n    return {\r\n      'x-api-key': credentials.apiKey\r\n    };\r\n  }\r\n\r\n  mapQueryResponse(response) {\r\n    if (!response || !response.tables) {\r\n      throw new Error('Unexpected response content from query');\r\n    }\r\n\r\n    const colIndexPropertyMap = this.buildColumnIndexPropertyMap(response);\r\n    const rows = response.tables[0].rows.map(row => {\r\n        const itemType = row[colIndexPropertyMap['itemType']];\r\n        const reponseMapper = this.getResponseMapper(itemType);\r\n        if (!reponseMapper) {\r\n          // when item type is not supported, skip\r\n          return null;\r\n        }\r\n\r\n        var model = {};\r\n        reponseMapper.forEach(propertyMapper => propertyMapper(row, colIndexPropertyMap, model));\r\n        return model;\r\n      })\r\n      .filter(r => r !== null)\r\n      .sort((a, b) => {\r\n        if (a.timestamp === b.timestamp) {\r\n          return 0;\r\n        } else if (a.timestamp > b.timestamp) {\r\n          return 1;\r\n        } else {\r\n          return -1;\r\n        }\r\n      });\r\n\r\n    return {\r\n      logs: rows,\r\n      appName: this.getAppName(response, colIndexPropertyMap),\r\n      fetchTime: new Date()\r\n    };\r\n  }\r\n\r\n  getResponseMapper(itemType) {\r\n    return responseMapper[itemType];\r\n  }\r\n\r\n  /**\r\n   * return a dictionary of property name and column index\r\n   * {[columnName: string]: columnIndex: number} response\r\n   */\r\n  buildColumnIndexPropertyMap(response) {\r\n    const columnsIndexMap = {};\r\n    response.tables[0].columns.forEach((c, i) => columnsIndexMap[c.name] = i);\r\n    return columnsIndexMap;\r\n  }\r\n\r\n  getAppName(response, columnsIndexPropertyMap) {\r\n    if (response.tables[0].rows.length < 1) {\r\n      return null;\r\n    }\r\n    const appNameIndex = columnsIndexPropertyMap['appName'];\r\n    return response.tables[0].rows[0][appNameIndex]\r\n  }\r\n}\r\n\r\nconst responseMapper = {\r\n  trace: [\r\n    (row, columnsIndexMap, model) => {\r\n      model.timestamp = new Date(row[columnsIndexMap['timestamp']]);\r\n    },\r\n    (row, columnsIndexMap, model) => {\r\n      model.message = row[columnsIndexMap['message']];\r\n    },\r\n    (row, columnsIndexMap, model) => {\r\n      model.severityLevel = row[columnsIndexMap['severityLevel']];\r\n    }\r\n  ],\r\n  exception: [\r\n    (row, columnsIndexMap, model) => {\r\n      model.timestamp = new Date(row[columnsIndexMap['timestamp']]);\r\n    },\r\n    (row, columnsIndexMap, model) => {\r\n      model.message = `${row[columnsIndexMap['problemId']]}: ${row[columnsIndexMap['outerMessage']]}`;\r\n      if (row[columnsIndexMap['outerMessage']] !== row[columnsIndexMap['innermostMessage']]) {\r\n        model.message += `\\r\\n${row[columnsIndexMap['innermostType']]}: ${row[columnsIndexMap['innermostMessage']]}.`;\r\n      }\r\n    },\r\n    (row, columnsIndexMap, model) => {\r\n      model.severityLevel = row[columnsIndexMap['severityLevel']];\r\n    }\r\n  ]\r\n};","import MockHttpClient from './Mock/MockHttpClient';\r\nimport HttpClient from './HttpClient';\r\n\r\nexport default function httpClientFactory() {\r\n  if (process.env.NODE_ENV === 'test' || process.env.REACT_APP_MODE === 'demo') {\r\n    return new MockHttpClient();\r\n  } else {\r\n    return new HttpClient();\r\n  }\r\n}","class DomUtils {\r\n  scrollBottom(selector) {\r\n    document.querySelector(selector).scrollTo(0, document.querySelector(selector).scrollHeight);\r\n  }\r\n\r\n  isScrollEnd(selector) {\r\n    const scrollPosition =\r\n      document.querySelector(selector).scrollTop +\r\n      document.querySelector(selector).offsetHeight;\r\n    return scrollPosition === document.querySelector(selector).scrollHeight;\r\n  }\r\n}\r\n\r\nexport default new DomUtils();","class ConsoleDoc {\r\n  printHelpOnConsole() {\r\n    if (process.env.NODE_ENV === 'test') {\r\n      return;\r\n    }\r\n\r\n    console.log(\r\n`Hello! Here are some tips you must think useful:\r\nQuery documentation (https://docs.loganalytics.io/docs/Language-Reference/):\r\nSeverity levels:\r\n0: 'verbose',\r\n1: 'information',\r\n2: 'warning',\r\n3: 'error',\r\n4: 'critical'\r\n\r\nQuery samples:\r\ntraces | where severityLevel > 2 | sort by timestamp desc | limit 200\r\ntraces | where message has 'Error' | sort by timestamp desc | limit 200\r\nexceptions | sort by timestamp desc | limit 200\r\nunion exceptions, traces | sort by timestamp desc | limit 200\r\ntraces | where timestamp > todatetime(\"2018-04-26 10:20:00Z\") | sort by timestamp desc | limit 100\r\ntraces | where timestamp > ago(1h)\r\n\r\nShare a url: ${window.location.href.split('?')[0]}?app_id={your_app_id}&api_key={your_api_key}`);\r\n  }\r\n}\r\n\r\nexport default new ConsoleDoc();","import { createStore, applyMiddleware } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport { rootReducer } from '../Reducers';\r\nimport { rootEpic } from '../Epics';\r\n\r\nimport ProfileRepository from '../Services/ProfileRepository';\r\nimport ApplicationInsightsClient from '../Services/ApplicationInsightsClient';\r\nimport DomUtils from '../Utils/DomUtils';\r\nimport ConsoleDoc from '../Utils/ConsoleDoc';\r\n\r\nconst epicMiddleware = createEpicMiddleware({\r\n  dependencies: {\r\n    applicationInsightsClient: new ApplicationInsightsClient(),\r\n    profileRepository: new ProfileRepository(),\r\n    DomUtils: DomUtils,\r\n    ConsoleDoc: ConsoleDoc\r\n  }\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(epicMiddleware)\r\n);\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\nexport default store;","import './Header.css';\r\nimport React from 'react';\r\n\r\nconst Header = (props) => {\r\n  const { sidebar, toggleSidebar, appName, loading } = props;\r\n  const titleIconClass = `ail-header-title_icon ${(loading ? 'ail-header-title_icon--loading' : '')}`;\r\n  return (\r\n    <header className=\"ail-header\">\r\n      <div className=\"ail-header-app_name\" hidden={!appName}>{appName}</div>\r\n      <strong className=\"ail-header-title\">\r\n        <span className={titleIconClass} role=\"img\" aria-labelledby=\"ail-header-title\">💡 </span>\r\n        <span id=\"ail-header-title\">Application Insights Log</span>\r\n      </strong>\r\n      <div className=\"ail-credentials-menu\">\r\n        <div className={`ail-icon-menu ${sidebar ? 'open' : ''}`}\r\n          onClick={() => toggleSidebar()}>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","class DateUtils {\r\n  formatDate(date) {\r\n    return `${this.formatTwoDigit(date.getFullYear())}-${this.formatTwoDigit(date.getMonth() + 1)}-${this.formatTwoDigit(date.getDate())}`;\r\n  }\r\n\r\n  formatTime(date) {\r\n    return `${this.formatTwoDigit(date.getHours())}:${this.formatTwoDigit(date.getMinutes())}:${this.formatTwoDigit(date.getSeconds())}`;\r\n  }\r\n\r\n  formatDateTime(date) {\r\n    if (!date) {\r\n      return '-';\r\n    }\r\n    return this.formatDate(date) + ' ' + this.formatTime(date);\r\n  }\r\n\r\n  formatTwoDigit(number) {\r\n    if (number < 10) {\r\n      return `0${number}`;\r\n    }\r\n    return number;\r\n  }\r\n}\r\n\r\nexport default new DateUtils();","const SeverityLevel = {\r\n  0: 'verbose',\r\n  1: 'information',\r\n  2: 'warning',\r\n  3: 'error',\r\n  4: 'critical'\r\n};\r\n\r\nexport default SeverityLevel;\r\n","import React from 'react';\r\nimport DateUtils from '../Utils/DateUtils'\r\nimport SeverityLevel from '../Models/SeverityLevel'\r\nimport './LogLine.css';\r\n\r\nconst LogLine = (props) => {\r\n  const { log } = props;\r\n  return (\r\n    <div className={`ail-log_line ail-log_line--${SeverityLevel[log.severityLevel]}`}>\r\n      <span className=\"ail-log_line-time\">[{DateUtils.formatDateTime(log.timestamp)}]</span>\r\n      <span className=\"ail-log_line-message\">{log.message}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogLine;","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DateUtils from '../Utils/DateUtils';\r\nimport LogLine from './LogLine';\r\n\r\nconst mapStateToProps = state => {\r\n  return { logs: state.logs, fetchTime: state.fetchTime, appName: state.appName };\r\n};\r\n\r\nlet Log = ({ logs, fetchTime, appName }) => (\r\n  <Fragment>\r\n    <h1>\r\n      {appName || 'No results'}\r\n    </h1>\r\n    <div className=\"ail-log\">\r\n      {logs.map((item, i) =>\r\n        <LogLine log={item} key={DateUtils.formatDate(fetchTime) + i} />\r\n      )}\r\n    </div>\r\n  </Fragment>\r\n);\r\nLog = connect(mapStateToProps)(Log);\r\nexport default Log;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  setCredentialsAction,\r\n  clearDataAction,\r\n  tryFindCredentialsAction\r\n} from '../Actions/Profile';\r\nimport { setAutoRefreshAction, setSearchPeriodAction } from '../Actions/Logs';\r\nimport './Credentials.css';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    autoRefresh: state.autoRefresh,\r\n    searchPeriod: state.searchPeriod,\r\n    availableApps: [...state.availableApps],\r\n    credentials: {\r\n      appId: state.credentials.appId,\r\n      apiKey: state.credentials.apiKey\r\n    }\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setCredentials: credentials => dispatch(setCredentialsAction(credentials)),\r\n    clearData: () => dispatch(clearDataAction()),\r\n    tryFindCredentials: appName => dispatch(tryFindCredentialsAction(appName)),\r\n    setAutoRefresh: enabled => dispatch(setAutoRefreshAction(enabled)),\r\n    setSearchPeriod: searchPeriod => dispatch(setSearchPeriodAction(searchPeriod)),\r\n  };\r\n};\r\n\r\nclass Credentials extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      credentials: {\r\n        appId: props.credentials.appId,\r\n        apiKey: props.credentials.apiKey\r\n      },\r\n      availableApps: props.availableApps,\r\n      selectedStoredCredential: '',\r\n      editing: props.credentials.appId === null\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.clearData = this.clearData.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (!this.state.editing && this.credentialsChanged(nextProps.credentials, this.state.credentials)) {\r\n      this.setState({\r\n        credentials: {\r\n          appId: nextProps.credentials.appId,\r\n          apiKey: nextProps.credentials.apiKey\r\n        },\r\n        selectedStoredCredential: ''\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    let { credentials } = this.state;\r\n    credentials = { ...credentials, [event.target.id]: event.target.value };\r\n    this.setState({ credentials });\r\n  }\r\n\r\n  handlePeriodChange(event) {\r\n    this.props.setSearchPeriod(event.target.value);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (!this.state.editing) {\r\n      this.setState({ editing: !this.state.editing });\r\n      return;\r\n    }\r\n    this.props.setCredentials(this.state.credentials);\r\n    this.setState({ editing: !this.state.editing });\r\n  }\r\n\r\n  checkStoredAppCredentials(appName) {\r\n    this.setState({ editing: false });\r\n    this.props.tryFindCredentials(appName);\r\n    this.setState({ selectedStoredCredential: appName })\r\n  }\r\n\r\n  clearData() {\r\n    if (!window.confirm('Are you sure to clear all stored data?')) {\r\n      return;\r\n    }\r\n    this.props.clearData();\r\n  }\r\n\r\n  toggleAutoRefresh() {\r\n    this.props.setAutoRefresh(!this.props.autoRefresh);\r\n  }\r\n\r\n  credentialsChanged(credentials1, credentials2) {\r\n    return credentials1.appId !== credentials2.appId || credentials1.apiKey !== credentials2.apiKey;\r\n  }\r\n\r\n  validCredentials = () => {\r\n    return this.state.credentials.appId && this.state.credentials.apiKey;\r\n  }\r\n\r\n  renderCredentialsForm() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className=\"ail-credentials-section ail-credentials\">\r\n          <label>Credentials</label>\r\n          <input className=\"ail-input\" value={this.state.credentials.appId}\r\n            placeholder='App id'\r\n            id=\"appId\"\r\n            disabled={!this.state.editing}\r\n            onChange={(e) => this.handleChange(e)} />\r\n          <input className=\"ail-input\" value={this.state.credentials.apiKey}\r\n            id=\"apiKey\"\r\n            placeholder='API key'\r\n            disabled={!this.state.editing}\r\n            onChange={(e) => this.handleChange(e)} />\r\n          {\r\n            this.state.editing ?\r\n              <button className={`ail-btn ail-btn--success u-w100 u-mt-2 ${(!this.validCredentials() ? 'disabled' : '')}`}>\r\n                Apply\r\n              </button> :\r\n              <button className={`ail-btn ail-btn--default u-w100 u-mt-2`}>Edit</button>\r\n          }\r\n        </div>\r\n        {this.renderAppsDropDown()}\r\n      </form>\r\n    );\r\n  }\r\n\r\n  renderAppsDropDown() {\r\n    if (this.props.availableApps.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    return (\r\n      <div className=\"ail-credentials-section\">\r\n        <label>Switch apps</label>\r\n        <select value={this.state.selectedStoredCredential}\r\n          className=\"ail-input\"\r\n          onChange={(e) => this.checkStoredAppCredentials(e.target.value)}>\r\n          <option>Saved apps</option>\r\n          {this.props.availableApps.sort().map((appName, i) =>\r\n            <option key={i} value={appName}>{appName}</option>\r\n          )}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderGlobalOptions() {\r\n    return (\r\n      <div className=\"ail-credentials-section\">\r\n        <label>Settings</label>\r\n        <ul className=\"ail-btn-list\">\r\n          <li className=\"ail-toggle\">\r\n            <input className=\"hidden\" type=\"checkbox\" id=\"autorefresh\" checked={this.props.autoRefresh} onChange={(e) => this.toggleAutoRefresh()} />\r\n            <label htmlFor=\"autorefresh\" className=\"ail-btn\">Auto refresh</label>\r\n          </li>\r\n          <li className=\"ail-btn ail-btn--default\" onClick={() => this.clearData()}>Clear data</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderPeriod() {\r\n    return (\r\n      <div className=\"ail-credentials-section\">\r\n        <label>Search period</label>\r\n        <input className=\"ail-input\" value={this.props.searchPeriod}\r\n            placeholder='Specify period (P7D, PT1H...)'\r\n            id=\"searchPeriod\"\r\n            onChange={(e) => this.handlePeriodChange(e)} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.renderCredentialsForm()}\r\n        {this.renderGlobalOptions()}\r\n        {this.renderPeriod()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nCredentials = connect(mapStateToProps, mapDispatchToProps)(Credentials);\r\nexport default Credentials;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  setQueryAction,\r\n  getLogsAction\r\n} from '../Actions/Logs';\r\nimport './QueryBox.css';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    query: state.query\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getLogs: () => dispatch(getLogsAction()),\r\n    setQuery: query => dispatch(setQueryAction(query))\r\n  };\r\n};\r\n\r\nclass QueryBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      query: props.query\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.state.query !== nextProps.query) {\r\n      this.setState({ query: nextProps.query });\r\n    }\r\n  }\r\n\r\n  setQuery = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.setQuery(this.state.query);\r\n    this.props.getLogs();\r\n  }\r\n\r\n  onEnterPress = (event) => {\r\n    if (event.keyCode === 13 && event.ctrlKey === true) {\r\n      this.handleSubmit(event);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"ail-footer\" onSubmit={this.handleSubmit}>\r\n        <textarea\r\n          className=\"ail-query\"\r\n          value={this.state.query}\r\n          placeholder=\"Write a query...\"\r\n          onKeyDown={this.onEnterPress}\r\n          onChange={this.setQuery} />\r\n        <button className=\"ail-search\" disabled={!this.state.query}>Search</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nQueryBox = connect(mapStateToProps, mapDispatchToProps)(QueryBox);\r\nexport default QueryBox;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DateUtils from '../Utils/DateUtils';\r\nimport './StatusBar.css';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    autoRefresh: state.autoRefresh,\r\n    fetchTime: state.fetchTime,\r\n    appName: state.appName,\r\n    error: state.error,\r\n    loading: state.loading\r\n  };\r\n};\r\n\r\nlet StatusBar = (props) => (\r\n  <div className=\"ail-footer-status\">\r\n    <div className=\"ail-footer-status-item ail-footer-status--timestamp\">\r\n      {\r\n        !props.loading ? (\r\n          <div>\r\n            updated at {DateUtils.formatDateTime(props.fetchTime)} {props.autoRefresh ? '(auto)' : ''}\r\n          </div>\r\n        ) : 'Loading...'\r\n      }\r\n    </div>\r\n    {props.error ?\r\n      <div className=\"ail-footer-status-item ail-footer-status--error\">\r\n        {props.error}\r\n      </div> : ''\r\n    }\r\n  </div>\r\n);\r\nStatusBar = connect(mapStateToProps)(StatusBar);\r\nexport default StatusBar;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport Header from './Components/Header';\r\nimport Log from './Components/Log';\r\nimport Credentials from './Components/Credentials';\r\nimport QueryBox from './Components/QueryBox';\r\nimport { loadProfileAction } from './Actions/Profile';\r\nimport StatusBar from './Components/StatusBar';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    hasCredentials: state.credentials && state.credentials.appId,\r\n    appName: state.appName,\r\n    loading: state.loading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    loadProfile: () => dispatch(loadProfileAction())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sidebar: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadProfile();\r\n  }\r\n\r\n  toggleSidebar() {\r\n    this.setState({ sidebar: !this.state.sidebar });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`ait ${this.state.sidebar ? 'ail--sidebar-open' : ''}`}>\r\n        <div className=\"ail-container\">\r\n          <Header\r\n            sidebar={this.state.sidebar}\r\n            loading={this.props.loading}\r\n            toggleSidebar={() => this.toggleSidebar()}\r\n            appName={this.props.appName} />\r\n          <div className=\"ail-body\">\r\n            {\r\n              !this.props.hasCredentials ?\r\n                <h1>Welcome! To start, first set your credentials on top menu.</h1> :\r\n                <Log />\r\n            }\r\n          </div>\r\n          <div>\r\n            <StatusBar />\r\n            <QueryBox />\r\n          </div>\r\n        </div>\r\n        <div className=\"ail-sidebar\">\r\n          <Credentials />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './Store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}